{"cells":[{"cell_type":"code","source":["!nvidia-smi"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XqA6KdQv-cka","executionInfo":{"status":"ok","timestamp":1684943735504,"user_tz":300,"elapsed":26,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"c3483d54-480d-44ca-a3f0-b577320b3305"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Wed May 24 15:55:35 2023       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 525.85.12    Driver Version: 525.85.12    CUDA Version: 12.0     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   63C    P8    10W /  70W |      0MiB / 15360MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DHMZDGnCumtY","executionInfo":{"status":"ok","timestamp":1684943753692,"user_tz":300,"elapsed":18195,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"7ed53e0b-d338-4141-f925-97dbf62623e3"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4937,"status":"ok","timestamp":1684943758625,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"},"user_tz":300},"id":"ardFlDgZpBsy","outputId":"398ef6fa-dce3-4ff9-a368-81f7116556b7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting faker\n","  Downloading Faker-18.9.0-py3-none-any.whl (1.7 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m21.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: python-dateutil>=2.4 in /usr/local/lib/python3.10/dist-packages (from faker) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.4->faker) (1.16.0)\n","Installing collected packages: faker\n","Successfully installed faker-18.9.0\n"]}],"source":["!pip install faker\n","#!pip install --upgrade keras-nlp\n","# Install the most re version of TensorFlow to use the improved\n","# masking support for `tf.keras.layers.MultiHeadAttention`.\n","# !apt install --allow-change-held-packages libcudnn8=8.1.0.77-1+cuda11.2\n","# !pip uninstall -y -q tensorflow keras tensorflow-estimator tensorflow-text\n","# !pip install -q tensorflow_datasets\n","# !pip install -q -U tensorflow-text tensorflow"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":3540,"status":"ok","timestamp":1684943762159,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"},"user_tz":300},"id":"26AK4bzLVbtG","colab":{"base_uri":"https://localhost:8080/","height":36},"outputId":"451c2fa5-01f7-4243-b116-26075fc83716"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'2.12.0'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":4}],"source":["import logging\n","import time\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","import os\n","tf.version.VERSION"]},{"cell_type":"code","source":["#os.environ['CUDA_VISIBLE_DEVICES']"],"metadata":{"id":"b3mKB7-lKaJi","executionInfo":{"status":"ok","timestamp":1684943762160,"user_tz":300,"elapsed":25,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# os.environ['CUDA_VISIBLE_DEVICES'] = '/gpu:0'\n","# os.environ['TF_FORCE_GPU_ALLOW_GROWTH'] = 'true'"],"metadata":{"id":"wgf4ow6OKTUW","executionInfo":{"status":"ok","timestamp":1684943762161,"user_tz":300,"elapsed":24,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pQyRmDuXml_i"},"source":["## Create the Dataset"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":25,"status":"ok","timestamp":1684943762161,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"},"user_tz":300},"id":"SuUzY7s5pHOB"},"outputs":[],"source":["from faker import Faker\n","fake = Faker()\n","\n","# We need to seed these guys. For some reason I always use 101\n","Faker.seed(500)\n","FORMATS = ['short', # d/M/YY\n","           'medium', # MMM d, YYY\n","           'medium',\n","           'medium',\n","           'long', # MMMM dd, YYY\n","           'long',\n","           'long',\n","           'long',\n","           'long',\n","           'full', # EEEE, MMM dd, YYY\n","           'full',\n","           'full',\n","           'd MMM YYY', \n","           'd MMMM YYY',\n","           'd MMMM YYY',\n","           'd MMMM YYY',\n","           'd MMMM YYY',\n","           'd MMMM YYY',\n","           'YYY MMMM d',\n","           'YYY MMMM d',\n","           'YYY MMMM d',\n","           'YYY MMMM d',\n","           'YYY, EEEE d, MMMM',\n","           'YYY EE d, MMM',\n","           'YYY/MM/dd',\n","           'YYY/MM/dd',\n","           'dd/MM/YYY',\n","           'EE d, MMM YYY',\n","           'EEEE d, MMMM YYY']"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24,"status":"ok","timestamp":1684943762162,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"},"user_tz":300},"id":"Ebs8RUqapOsh","outputId":"2fe7581b-45dd-4405-b877-f7f21483bc07"},"outputs":[{"output_type":"stream","name":"stdout","text":["short => 5/31/01\n","medium => Nov 4, 2005\n","medium => May 9, 2009\n","medium => Nov 19, 2001\n","long => May 25, 1987\n","long => March 31, 2013\n","long => June 11, 2021\n","long => June 21, 2017\n","long => August 2, 1995\n","full => Tuesday, June 26, 1984\n","full => Sunday, May 8, 1977\n","full => Wednesday, February 3, 1993\n","d MMM YYY => 5 Nov 2008\n","d MMMM YYY => 22 March 2020\n","d MMMM YYY => 20 March 1976\n","d MMMM YYY => 26 March 1971\n","d MMMM YYY => 14 October 1983\n","d MMMM YYY => 25 June 1992\n","YYY MMMM d => 1985 October 11\n","YYY MMMM d => 1997 February 5\n","YYY MMMM d => 1990 January 24\n","YYY MMMM d => 1973 April 29\n","YYY, EEEE d, MMMM => 2021, Saturday 12, June\n","YYY EE d, MMM => 1974 Tue 17, Sep\n","YYY/MM/dd => 1992/02/14\n","YYY/MM/dd => 2000/07/01\n","dd/MM/YYY => 08/06/2012\n","EE d, MMM YYY => Fri 7, Dec 1990\n","EEEE d, MMMM YYY => Wednesday 21, June 1995\n"]}],"source":["from babel.dates import format_date\n","for format in FORMATS:\n","    print('%s => %s' %(format, format_date(fake.date_object(), format=format, locale='en')))"]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":18,"status":"ok","timestamp":1684943762163,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"},"user_tz":300},"id":"XjWYj2n8phzP"},"outputs":[],"source":["def random_date():\n","    import random\n","    dt = fake.date_between(start_date = '-120y' ,end_date = '+50y')\n","\n","    try:\n","        \n","        date = format_date(dt, format=random.choice(FORMATS), locale='en')\n","        human_readable = date.lower().replace(',', '')\n","        machine_readable = dt.isoformat()\n","\n","    except AttributeError as e:\n","        return None, None, None\n","\n","    return human_readable, machine_readable, dt"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":18,"status":"ok","timestamp":1684943762164,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"},"user_tz":300},"id":"LD5ZmfdLpnZ3"},"outputs":[],"source":["def create_dataset(m):\n","    from tqdm import tqdm\n","    # human_vocab = set()\n","    # machine_vocab = set()\n","    dataset = []\n","    \n","    for i in tqdm(range(m)):\n","        h, m, _ = random_date()\n","       \n","        if h is not None:\n","            # human_vocab.update(tuple(h))\n","            # machine_vocab.update(tuple(m))\n","            dataset.append((h, m))\n","\n","    # # We also add two special chars, <unk> for unknown characters, and <pad> to add padding at the end\n","    # human = dict(zip(sorted(human_vocab) + ['<sos>','<eos>','<unk>', '<pad>'], list(range(len(human_vocab) + 4))))\n","    # inv_machine = dict(enumerate(sorted(machine_vocab)+  ['<sos>','<eos>','<unk>', '<pad>']))\n","    # machine = {v: k for k, v in inv_machine.items()}\n","    return dataset"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":162},"id":"Lx5JcHkBp5sv","outputId":"f456cfb8-3b3e-42c3-9f7a-c0efb2e3db9b","executionInfo":{"status":"ok","timestamp":1684943790763,"user_tz":300,"elapsed":28618,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 360000/360000 [00:28<00:00, 12524.18it/s]\n"]},{"output_type":"execute_result","data":{"text/plain":["                      human     machine\n","326058  monday july 30 2046  2046-07-30\n","63138            sep 6 2039  2039-09-06\n","249369     10 december 1991  1991-12-10"],"text/html":["\n","  <div id=\"df-37aaf920-5035-4da7-b1dc-2646067fad0a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>human</th>\n","      <th>machine</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>326058</th>\n","      <td>monday july 30 2046</td>\n","      <td>2046-07-30</td>\n","    </tr>\n","    <tr>\n","      <th>63138</th>\n","      <td>sep 6 2039</td>\n","      <td>2039-09-06</td>\n","    </tr>\n","    <tr>\n","      <th>249369</th>\n","      <td>10 december 1991</td>\n","      <td>1991-12-10</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-37aaf920-5035-4da7-b1dc-2646067fad0a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-37aaf920-5035-4da7-b1dc-2646067fad0a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-37aaf920-5035-4da7-b1dc-2646067fad0a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":11}],"source":["import pandas as pd\n","import numpy as np\n","\n","m = 360000\n","n_sentences = 4\n","dataset =  create_dataset(m)\n","df = pd.DataFrame(dataset, columns = ['human','machine'])\n","df.sample(3)"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"gMl2IP2ABYxQ","colab":{"base_uri":"https://localhost:8080/","height":81},"executionInfo":{"status":"ok","timestamp":1684943791904,"user_tz":300,"elapsed":1155,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"7af490e3-4362-46b4-b919-86d05b989083"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["               human     machine  year\n","255182  10 june 2028  2028-06-10  2028"],"text/html":["\n","  <div id=\"df-ede97ce2-9e33-4895-94b8-8bf33a4a6787\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>human</th>\n","      <th>machine</th>\n","      <th>year</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>255182</th>\n","      <td>10 june 2028</td>\n","      <td>2028-06-10</td>\n","      <td>2028</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ede97ce2-9e33-4895-94b8-8bf33a4a6787')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ede97ce2-9e33-4895-94b8-8bf33a4a6787 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ede97ce2-9e33-4895-94b8-8bf33a4a6787');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":12}],"source":["df['year']=pd.to_datetime(df['machine']).dt.strftime('%Y')\n","df.sample(1)"]},{"cell_type":"code","source":["#df['year'].hist()"],"metadata":{"id":"2GmExxhja-Jp","executionInfo":{"status":"ok","timestamp":1684943791905,"user_tz":300,"elapsed":11,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["df['year'].min(),df['year'].max()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Fxnco9e0cPK3","executionInfo":{"status":"ok","timestamp":1684943791906,"user_tz":300,"elapsed":11,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"7075f50b-0b6c-4c38-b30d-862a10e0072d"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('1903', '2073')"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","execution_count":15,"metadata":{"id":"jI059d2OM4u-","executionInfo":{"status":"ok","timestamp":1684943799593,"user_tz":300,"elapsed":7693,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["#create random sentences\n","\n","random_sentences = [fake.paragraph(nb_sentences=n_sentences) for _ in range(m)]\n","df.loc[:,'RANDOM_SENTENCE'] = random_sentences"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"5x9_4CfAN6F0","colab":{"base_uri":"https://localhost:8080/","height":81},"executionInfo":{"status":"ok","timestamp":1684943799594,"user_tz":300,"elapsed":16,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"3dd08cd9-b44a-42a3-dfa7-0ae7a08183c2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              human     machine  year  \\\n","358373  13 dec 1964  1964-12-13  1964   \n","\n","                                          RANDOM_SENTENCE  \n","358373  But look hit. Allow stand stock woman. Half po...  "],"text/html":["\n","  <div id=\"df-bfe31a21-728d-4d0e-b488-c18dc3247fb1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>human</th>\n","      <th>machine</th>\n","      <th>year</th>\n","      <th>RANDOM_SENTENCE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>358373</th>\n","      <td>13 dec 1964</td>\n","      <td>1964-12-13</td>\n","      <td>1964</td>\n","      <td>But look hit. Allow stand stock woman. Half po...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bfe31a21-728d-4d0e-b488-c18dc3247fb1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-bfe31a21-728d-4d0e-b488-c18dc3247fb1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-bfe31a21-728d-4d0e-b488-c18dc3247fb1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":16}],"source":["df.sample(1)"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"Iv1jfNdcOAoZ","colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"status":"ok","timestamp":1684943799594,"user_tz":300,"elapsed":14,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"0b21a4f7-1cb9-4013-edf4-0c5c28f89e40"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Use recognize 7 august 1921 as. Black western lawyer continue. Finally religious identify practice.'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":17}],"source":["import random\n","from string import digits\n","\n","remove_digits = str.maketrans('', '', digits)\n","row = df.loc[0]\n","rs = row['RANDOM_SENTENCE']\n","rs = rs.translate(remove_digits)\n","date = row['human']\n","idx = random.randint(0, len(rs.split()))\n","rs_words = rs.split()\n","\n","rs_final = \" \".join(rs_words[:idx]) + ' ' + date  + ' ' + \" \".join(rs_words[idx:])\n","rs_final"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"IfEMglvIPCYi","executionInfo":{"status":"ok","timestamp":1684943799595,"user_tz":300,"elapsed":13,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["def add_date_to_sentence(row):\n","  remove_digits = str.maketrans('', '', digits)\n","  rs = row['RANDOM_SENTENCE']\n","  rs = rs.translate(remove_digits)\n","  date = row['human']\n","  idx = random.randint(0, len(rs.split()))\n","  rs_words = rs.split()\n","\n","  rs_final = \" \".join(rs_words[:idx]) + ' ' + date  + ' ' + \" \".join(rs_words[idx:])\n","  return rs_final"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"W0tgCkGTPLkw","executionInfo":{"status":"ok","timestamp":1684943805010,"user_tz":300,"elapsed":5428,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["df.loc[:,'sentence'] = df.apply(lambda row: add_date_to_sentence(row), axis=1)"]},{"cell_type":"code","execution_count":20,"metadata":{"id":"ybfgXu4NPXhu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684943805011,"user_tz":300,"elapsed":25,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"0e8c2dd9-350d-4d3a-d05f-3a2ea5857b25"},"outputs":[{"output_type":"stream","name":"stdout","text":["Stay picture begin beyond result send sat 27 sep 2036 huge. Question design painting physical half attack local. \n","\n","Actually trouble level positive cup real jun 29 1917 song. Mr feel use be face bit cover. Together effort late ground account three. Indicate public service cup few tonight policy. Trouble shake member. \n","\n","Sense top protect yeah story appear indicate. However professor claim 2013 tue 8 jan exactly thus trade discuss. Or practice exactly him even prove religious. \n","\n","Above box while no Congress. Series certain opportunity 2063/07/02 certain class sell individual. Wonder week energy very design today imagine. Soon resource my one share me room. Notice mean relate keep camera city page always. \n","\n","Should various training various september 27 1964 outside. Style here worry measure. Nice race church form red true half. Contain relate per gas rich cup evidence. True interesting example allow. \n","\n"]}],"source":["for i,row in df.sample(5).iterrows():\n","  print(row['sentence'],'\\n')"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"A39OXaTeo388","executionInfo":{"status":"ok","timestamp":1684943805011,"user_tz":300,"elapsed":18,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["df['machine'] = df['machine'].apply(lambda m: '#'+ m +'%')"]},{"cell_type":"code","source":["df.head(2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"id":"P6yThBav0-lg","executionInfo":{"status":"ok","timestamp":1684943805640,"user_tz":300,"elapsed":647,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"d6af003d-2429-4635-92b1-b49358d3fb10"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           human       machine  year  \\\n","0  7 august 1921  #1921-08-07%  1921   \n","1    may 16 2055  #2055-05-16%  2055   \n","\n","                                     RANDOM_SENTENCE  \\\n","0  Use recognize as. Black western lawyer continu...   \n","1  Establish class real police either. Two lose a...   \n","\n","                                            sentence  \n","0  Use recognize as. Black western lawyer continu...  \n","1  Establish class real police either. Two lose a...  "],"text/html":["\n","  <div id=\"df-30e8580b-f446-4cbe-8351-9ec3cb1a6253\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>human</th>\n","      <th>machine</th>\n","      <th>year</th>\n","      <th>RANDOM_SENTENCE</th>\n","      <th>sentence</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>7 august 1921</td>\n","      <td>#1921-08-07%</td>\n","      <td>1921</td>\n","      <td>Use recognize as. Black western lawyer continu...</td>\n","      <td>Use recognize as. Black western lawyer continu...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>may 16 2055</td>\n","      <td>#2055-05-16%</td>\n","      <td>2055</td>\n","      <td>Establish class real police either. Two lose a...</td>\n","      <td>Establish class real police either. Two lose a...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-30e8580b-f446-4cbe-8351-9ec3cb1a6253')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-30e8580b-f446-4cbe-8351-9ec3cb1a6253 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-30e8580b-f446-4cbe-8351-9ec3cb1a6253');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":22}]},{"cell_type":"markdown","metadata":{"id":"3o_H-D46QSXX"},"source":["## TOKENIZER"]},{"cell_type":"code","source":["from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences"],"metadata":{"id":"o1ygouhZ0wav","executionInfo":{"status":"ok","timestamp":1684943805641,"user_tz":300,"elapsed":4,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["# Create a tokenizer\n","source_tokenizer = Tokenizer(num_words=None, filters='!\"#$%&()*+,-./:;<=>?@[\\]^_`{|}~', lower=True, split=' ', oov_token=\"<UKN>\" )\n","\n","# Define a batch of sentences\n","sentences = df['sentence']\n","\n","# Fit the tokenizer on the sentences\n","source_tokenizer.fit_on_texts(sentences)\n","\n","# Encode the sentences\n","encoded_sentences_source = source_tokenizer.texts_to_sequences(sentences)"],"metadata":{"id":"3wr9dEOa0evb","executionInfo":{"status":"ok","timestamp":1684943818436,"user_tz":300,"elapsed":12798,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["# print(sentences[:1].values[0])\n","# source_tokenizer.texts_to_sequences(sentences[:1])"],"metadata":{"id":"d41mdJ5D3MAj","executionInfo":{"status":"ok","timestamp":1684943818437,"user_tz":300,"elapsed":15,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["# Create a tokenizer\n","target_tokenizer = Tokenizer(num_words=None, filters='!\"#$%&()*+,-./:;<=>?@[\\]^_`{|}~', lower=True, split='',char_level=True, oov_token=\"<UKN>\" )\n","\n","# Define a batch of sentences\n","sentences = df['machine']\n","\n","# Fit the tokenizer on the sentences\n","target_tokenizer.fit_on_texts(sentences)\n","\n","# Encode the sentences\n","encoded_sentences_target = target_tokenizer.texts_to_sequences(sentences)"],"metadata":{"id":"DOCwlxZB0e4g","executionInfo":{"status":"ok","timestamp":1684943821106,"user_tz":300,"elapsed":2683,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["print(sentences[:1].values[0])\n","target_tokenizer.texts_to_sequences(sentences[:1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"URgCI8QR0e7I","executionInfo":{"status":"ok","timestamp":1684943821106,"user_tz":300,"elapsed":28,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"d6a5260e-c46b-4abf-b3cb-09a104c507b9"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["#1921-08-07%\n"]},{"output_type":"execute_result","data":{"text/plain":["[[6, 4, 8, 5, 4, 2, 3, 14, 2, 3, 13, 7]]"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["# Get the vocabulary size\n","VOCAB_SIZE_SOURCE = len(source_tokenizer.word_index) + 1\n","print(f'Vocab Size Source: {VOCAB_SIZE_SOURCE}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jWYrBRNM0e9f","executionInfo":{"status":"ok","timestamp":1684943821107,"user_tz":300,"elapsed":24,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"5fc29278-6a5e-48eb-9420-e89ce5f38098"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Vocab Size Source: 1289\n"]}]},{"cell_type":"code","source":["# Get the vocabulary size\n","VOCAB_SIZE_TARGET = len(target_tokenizer.word_index) + 1\n","print(f'Vocab Size Target: {VOCAB_SIZE_TARGET}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yfTztkgC0fAQ","executionInfo":{"status":"ok","timestamp":1684943821107,"user_tz":300,"elapsed":20,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"3b4e841d-1a69-40ad-8caf-e69f943cc401"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Vocab Size Target: 15\n"]}]},{"cell_type":"code","source":["# CALCULATE TX \n","TX_SOURCE = max([len(t) for t in encoded_sentences_source ])\n","TX_TARGET = max([len(t) for t in encoded_sentences_target ])\n","\n","print(f'TX_SOURCE:',TX_SOURCE)\n","print(f'TX_TARGET:',TX_TARGET)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"27lWQtON0fCx","executionInfo":{"status":"ok","timestamp":1684943821108,"user_tz":300,"elapsed":18,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"7f86c656-2b51-46b0-fb69-84b0ada02991"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["TX_SOURCE: 42\n","TX_TARGET: 12\n"]}]},{"cell_type":"code","source":["# Pad the sequences\n","x_query = pad_sequences(encoded_sentences_source, maxlen=TX_SOURCE, padding='post', truncating='post')\n","x_query.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qouIPU1M0fFi","executionInfo":{"status":"ok","timestamp":1684943822393,"user_tz":300,"elapsed":1300,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"5dfaa512-1cb6-46f5-a7ef-aec1747d5901"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(360000, 42)"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["# Pad the sequences\n","x_tar = pad_sequences(encoded_sentences_target, maxlen=TX_TARGET, padding='post', truncating='post')\n","x_tar.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3UUAvFji4z2_","executionInfo":{"status":"ok","timestamp":1684943822675,"user_tz":300,"elapsed":284,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"633fea22-f53f-4991-8a32-97ac66c04471"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(360000, 12)"]},"metadata":{},"execution_count":32}]},{"cell_type":"markdown","metadata":{"id":"VqHj6kiSmZh4"},"source":["# Tranformer **Architecture**"]},{"cell_type":"code","source":["from tensorflow import keras\n","from tensorflow.keras.layers import Embedding"],"metadata":{"id":"mekF0WC93u92","executionInfo":{"status":"ok","timestamp":1684943822675,"user_tz":300,"elapsed":4,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["class PositionalEmbedding(tf.keras.layers.Layer):\n","  def __init__(self, vocab_size, length, embedding_size, source):\n","    super().__init__()\n","    self.embedding_size = embedding_size\n","    self.length = length\n","    self.embedding =Embedding(\n","          input_dim=vocab_size,               # Size of the vocabulary\n","          output_dim=embedding_size,          # Length of the vector for each word\n","          input_length=length,                # Maximum length of a sequence\n","          mask_zero=source,                   # Add Padding Mask\n","          )\n","    \n","    # self.embedding.build([None])\n","\n","    # #Fine Tuning Weights of bert model\n","    # self.embedding.set_weights([embedding_matrix.detach().numpy()])\n","    \n","  def compute_mask(self, *args, **kwargs):\n","    return self.embedding.compute_mask(*args, **kwargs)\n","\n","\n","  def positional_encoding(self, length, depth):\n","    depth = depth/2\n","    positions = np.arange(length)[:, np.newaxis]     # (seq, 1)\n","    depths = np.arange(depth)[np.newaxis, :]/depth   # (1, depth)\n","    angle_rates = 1 / (10000**depths)         # (1, depth)\n","    angle_rads = positions * angle_rates      # (pos, depth)\n","\n","    pos_encoding = np.concatenate(\n","        [np.sin(angle_rads), np.cos(angle_rads)],\n","        axis=-1) \n","\n","    return tf.cast(pos_encoding, dtype=tf.float32)\n","\n","  def call(self, x):\n","    # length = tf.shape(x)[1]\n","    x = self.embedding(x)\n","    # This factor sets the relative scale of the embedding and positonal_encoding.\n","    x *= tf.math.sqrt(tf.cast(self.embedding_size, tf.float32))\n","    pos_encoding = self.positional_encoding(length = self.length, depth = self.embedding_size )\n","    x = x + pos_encoding[tf.newaxis, :self.length, :]\n","    return x"],"metadata":{"id":"Pp_pER9nzBtZ","executionInfo":{"status":"ok","timestamp":1684943822676,"user_tz":300,"elapsed":5,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","execution_count":35,"metadata":{"id":"P_6TeBzlI_Tz","executionInfo":{"status":"ok","timestamp":1684943822676,"user_tz":300,"elapsed":4,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["#Positional embedding source\n","# p_emb_source = PositionalEmbedding(vocab_size = VOCAB_SIZE_SOURCE, length = TX_SOURCE,  embedding_size = 30, source = True)(x_query)\n","# p_emb_source.shape"]},{"cell_type":"code","source":["#Positional embedding target\n","\n","# p_emb_target = PositionalEmbedding(vocab_size = VOCAB_SIZE_TARGET, length = TX_TARGET,  embedding_size = 30, source = False)(x_tar)\n","# p_emb_target.shape"],"metadata":{"id":"lbbfeUFd4uP9","executionInfo":{"status":"ok","timestamp":1684943822676,"user_tz":300,"elapsed":4,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":36,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5IcORSaRofbB"},"source":["## Encoder Layer"]},{"cell_type":"code","execution_count":37,"metadata":{"id":"1vWFQLIkJx4T","executionInfo":{"status":"ok","timestamp":1684943822945,"user_tz":300,"elapsed":273,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["# Attention Layer\n","\n","class BaseAttention(tf.keras.layers.Layer):\n","  def __init__(self, **kwargs):\n","    super().__init__()\n","    self.mha = tf.keras.layers.MultiHeadAttention(**kwargs)\n","    self.layernorm = tf.keras.layers.LayerNormalization()\n","    self.add = tf.keras.layers.Add()"]},{"cell_type":"code","execution_count":38,"metadata":{"id":"8dpXONLAKFe3","executionInfo":{"status":"ok","timestamp":1684943822946,"user_tz":300,"elapsed":26,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["class GlobalSelfAttention(BaseAttention):\n","  def call(self, x):\n","    attn_output = self.mha(\n","        query=x,\n","        value=x,\n","        key=x)\n","    x = self.add([x, attn_output])\n","    x = self.layernorm(x)\n","    return x"]},{"cell_type":"code","execution_count":39,"metadata":{"id":"JDOdYacpo-W6","executionInfo":{"status":"ok","timestamp":1684943822946,"user_tz":300,"elapsed":25,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["class FeedForward(tf.keras.layers.Layer):\n","  def __init__(self, embedding_size, num_units_ffn, dropout_rate=0.1):\n","    super().__init__()\n","    self.seq = tf.keras.Sequential([\n","      tf.keras.layers.Dense(num_units_ffn, activation='relu'),\n","      tf.keras.layers.Dense(embedding_size),\n","      tf.keras.layers.Dropout(dropout_rate)\n","    ])\n","    self.add = tf.keras.layers.Add()\n","    self.layer_norm = tf.keras.layers.LayerNormalization()\n","\n","  def call(self, x):\n","    x = self.add([x, self.seq(x)])\n","    x = self.layer_norm(x) \n","    return x"]},{"cell_type":"code","execution_count":40,"metadata":{"id":"Mx_ozFo1NstA","executionInfo":{"status":"ok","timestamp":1684943822947,"user_tz":300,"elapsed":26,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["# FeedForward(embedding_size = EMBEDDING_SIZE, num_units_ffn=128)(sample_gsa(pt_emb)).shape"]},{"cell_type":"code","execution_count":41,"metadata":{"id":"Xo8R8MaoMleP","executionInfo":{"status":"ok","timestamp":1684943822947,"user_tz":300,"elapsed":26,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["class EncoderLayer(tf.keras.layers.Layer):\n","  def __init__(self,*, embedding_size, num_heads, num_units_ffn, dropout_rate=0.1):\n","    super().__init__()\n","\n","    self.self_attention = GlobalSelfAttention(\n","        num_heads=num_heads,\n","        key_dim=embedding_size,\n","        dropout=dropout_rate)\n","\n","    self.ffn = FeedForward(embedding_size, num_units_ffn)\n","\n","  def call(self, x):\n","    x = self.self_attention(x)\n","    x = self.ffn(x)\n","    return x"]},{"cell_type":"code","execution_count":42,"metadata":{"id":"BMuPmzV4Myes","executionInfo":{"status":"ok","timestamp":1684943822947,"user_tz":300,"elapsed":24,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["# EncoderLayer(embedding_size = 10, num_units_ffn=128, num_heads = 8)(p_emb_source).shape"]},{"cell_type":"code","execution_count":43,"metadata":{"id":"lk8xOn6YS0XD","executionInfo":{"status":"ok","timestamp":1684943822948,"user_tz":300,"elapsed":24,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["class Encoder(tf.keras.layers.Layer):\n","  def __init__(self, num_layers, length, vocab_size ,embedding_size, num_heads,\n","               num_units_ffn, dropout_rate=0.1):\n","    super().__init__()\n","\n","    self.embedding_size = embedding_size\n","    self.num_layers = num_layers\n","\n","    self.pos_embedding = PositionalEmbedding(\n","        vocab_size=vocab_size, embedding_size=embedding_size, length = length, source = True)\n","\n","    self.enc_layers = [\n","        EncoderLayer(embedding_size=embedding_size,\n","                     num_heads=num_heads,\n","                     num_units_ffn=num_units_ffn,\n","                     dropout_rate=dropout_rate)\n","        for _ in range(num_layers)]\n","    self.dropout = tf.keras.layers.Dropout(dropout_rate)\n","\n","  def call(self, x):\n","    # `x` is token-IDs shape: (batch, seq_len)\n","    x = self.pos_embedding(x)  # Shape `(batch_size, seq_len, embedding_size)`.\n","    \n","    # Add dropout.\n","    x = self.dropout(x)\n","\n","    for i in range(self.num_layers):\n","      x = self.enc_layers[i](x)\n","\n","    return x  # Shape `(batch_size, seq_len, embedding_size)`."]},{"cell_type":"code","execution_count":44,"metadata":{"id":"7qe9lIRzTpfA","executionInfo":{"status":"ok","timestamp":1684943822948,"user_tz":300,"elapsed":24,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["#PositionalEmbedding(vocab_size = VOCAB_SIZE_SOURCE, length = TX_SOURCE,  embedding_size = 30,)(x_query[:100,:]).shape\n","\n","\n","# encoder = Encoder(\n","#   vocab_size=VOCAB_SIZE_SOURCE,\n","#   embedding_size = 30,\n","#   num_heads=4,\n","#   num_units_ffn=128,\n","#   num_layers=4, \n","#   length=TX_SOURCE\n","#   )\n","\n","# context = encoder(x_query)\n","# context.shape"]},{"cell_type":"markdown","metadata":{"id":"2xCJHGhSriQQ"},"source":["## Decoder Layer"]},{"cell_type":"code","execution_count":45,"metadata":{"id":"ad7W3vzkUOxm","executionInfo":{"status":"ok","timestamp":1684943822949,"user_tz":300,"elapsed":25,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["#Masking Attention for inputs y\n","\n","class CausalSelfAttention(BaseAttention):\n","  def call(self, x):\n","    attn_output = self.mha(\n","        query=x,\n","        value=x,\n","        key=x,\n","        use_causal_mask = True)\n","    x = self.add([x, attn_output])\n","    x = self.layernorm(x)\n","    return x"]},{"cell_type":"code","execution_count":46,"metadata":{"id":"Hg-cidmtNwqI","executionInfo":{"status":"ok","timestamp":1684943822949,"user_tz":300,"elapsed":24,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["# CausalSelfAttention(num_heads=8,key_dim=EMBEDDING_SIZE)(pt_emb).shape"]},{"cell_type":"code","execution_count":47,"metadata":{"id":"9jdy6ZMdV9dr","executionInfo":{"status":"ok","timestamp":1684943822949,"user_tz":300,"elapsed":24,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["#Cross Attention Layer \n","\n","class CrossAttention(BaseAttention):\n","  def call(self, x, context):\n","    attn_output, attn_scores = self.mha(\n","        query=x,\n","        key=context,\n","        value=context,\n","        return_attention_scores=True)\n","   \n","    # Cache the attention scores for plotting later.\n","    self.last_attn_scores = attn_scores\n","\n","    x = self.add([x, attn_output])\n","    x = self.layernorm(x)\n","    return x"]},{"cell_type":"code","execution_count":48,"metadata":{"id":"ZYBvgj_VqwwA","executionInfo":{"status":"ok","timestamp":1684943822949,"user_tz":300,"elapsed":24,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["# Simple Decode Layer\n","\n","class DecoderLayer(tf.keras.layers.Layer):\n","  def __init__(self,\n","               *,\n","               embedding_size,\n","               num_heads,\n","               num_units_ffn,\n","               dropout_rate=0.1):\n","    super(DecoderLayer, self).__init__()\n","\n","    self.causal_self_attention = CausalSelfAttention(\n","        num_heads=num_heads,\n","        key_dim=embedding_size,\n","        dropout=dropout_rate)\n","    \n","    self.cross_attention = CrossAttention(\n","        num_heads=num_heads,\n","        key_dim=embedding_size,\n","        dropout=dropout_rate)\n","\n","    self.ffn = FeedForward(embedding_size, num_units_ffn)\n","\n","  def call(self, x, context):\n","    x = self.causal_self_attention(x=x)\n","    x = self.cross_attention(x=x, context=context)\n","\n","    # Cache the last attention scores for plotting later\n","    self.last_attn_scores = self.cross_attention.last_attn_scores\n","\n","    x = self.ffn(x)  # Shape `(batch_size, seq_len, embedding_size)`.\n","    return x\n"]},{"cell_type":"code","source":["# p_emb_target.shape, context.shape"],"metadata":{"id":"2umUHBSEMQLa","executionInfo":{"status":"ok","timestamp":1684943822950,"user_tz":300,"elapsed":24,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["# DecoderLayer(\n","# embedding_size = 30,\n","# num_heads = 4,\n","# num_units_ffn = 128,\n","# dropout_rate = 0.1\n","# )(x = p_emb_target, context = context).shape"],"metadata":{"id":"3f1Uyob0Lxue","executionInfo":{"status":"ok","timestamp":1684943822951,"user_tz":300,"elapsed":25,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":50,"outputs":[]},{"cell_type":"code","execution_count":51,"metadata":{"id":"49rK4bw9w6TJ","executionInfo":{"status":"ok","timestamp":1684943822952,"user_tz":300,"elapsed":25,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["class Decoder(tf.keras.layers.Layer):\n","  def __init__(self, *, vocab_size, num_layers, embedding_size, num_heads, num_units_ffn, length,\n","               dropout_rate=0.1):\n","    super(Decoder, self).__init__()\n","\n","    self.embedding_size = embedding_size\n","    self.num_layers = num_layers\n","\n","    self.pos_embedding = PositionalEmbedding(\n","        vocab_size=vocab_size, embedding_size=embedding_size, length = length, source = False)\n","    \n","    self.dropout = tf.keras.layers.Dropout(dropout_rate)\n","\n","    self.dec_layers = [\n","        DecoderLayer(embedding_size=embedding_size, num_heads=num_heads,\n","                     num_units_ffn=num_units_ffn, dropout_rate=dropout_rate)\n","        for _ in range(num_layers)]\n","\n","    self.last_attn_scores = None\n","\n","  def call(self, x, context):\n","    # `x` is token-IDs shape (batch, target_seq_len)\n","    x = self.pos_embedding(x)  # (batch_size, target_seq_len, embedding_size)\n","\n","    x = self.dropout(x)\n","\n","    for i in range(self.num_layers):\n","      x  = self.dec_layers[i](x, context)\n","\n","    self.last_attn_scores = self.dec_layers[-1].last_attn_scores\n","\n","    # The shape of x is (batch_size, target_seq_len, embedding_size).\n","    return x, self.last_attn_scores"]},{"cell_type":"code","execution_count":52,"metadata":{"id":"j2JdMy3QYWIF","executionInfo":{"status":"ok","timestamp":1684943822952,"user_tz":300,"elapsed":25,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["# Decoder(\n","#   embedding_size=30,\n","#   num_heads=8,\n","#   num_units_ffn=128,\n","#   vocab_size=VOCAB_SIZE_TARGET,\n","#   num_layers=4,\n","#   length=TX_TARGET )(x = x_tar, context=context).shape"]},{"cell_type":"markdown","metadata":{"id":"QXNBD1cUzTip"},"source":["## Transformer"]},{"cell_type":"code","execution_count":53,"metadata":{"id":"zC-RGMDXzSpD","executionInfo":{"status":"ok","timestamp":1684943822954,"user_tz":300,"elapsed":27,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["class Transformer(tf.keras.Model):\n","  def __init__(self, *, num_layers, embedding_size, num_heads, num_units_ffn, length_source, length_target,\n","              target_vocab_size, source_vocab_size, dropout_rate=0.1):\n","    \n","    super().__init__()\n","    self.encoder = Encoder(\n","        num_layers = num_layers,\n","        length = length_source, \n","        vocab_size = source_vocab_size ,\n","        embedding_size = embedding_size,\n","        num_heads = num_heads,\n","        num_units_ffn = num_units_ffn,\n","        dropout_rate=0.1\n","    )\n","\n","    self.decoder = Decoder(\n","        vocab_size = target_vocab_size,\n","        num_layers = num_layers,\n","        embedding_size = embedding_size,\n","        num_heads = num_heads,\n","        num_units_ffn = num_units_ffn,\n","        length = length_target,\n","        dropout_rate=0.1\n","      )\n","\n","    self.final_layer = tf.keras.layers.Dense(target_vocab_size, name='predicted_word')\n","\n","\n","  def call(self, inputs):\n","    # To use a Keras model with `.fit` you must pass all your inputs in the\n","    # first argument.\n","    context, x  = inputs\n","\n","    context = self.encoder(context)  # (batch_size, context_len, embedding_size)\n","\n","    x, att = self.decoder(x, context)  # (batch_size, target_len, embedding_size)\n","\n","    # Final linear layer output.\n","    logits = self.final_layer(x)  # (batch_size, target_len, target_vocab_size)\n","\n","    try:\n","      # Drop the keras mask, so it doesn't scale the losses/metrics.\n","      # b/250038731\n","      del logits._keras_mask\n","    except AttributeError:\n","      pass\n","\n","    # Return the final output and the attention weights.\n","    return logits, att"]},{"cell_type":"markdown","metadata":{"id":"ylFN7cBgaTYI"},"source":["## **Hyperparameters**"]},{"cell_type":"code","execution_count":54,"metadata":{"id":"czH96yl3aOKJ","executionInfo":{"status":"ok","timestamp":1684943822955,"user_tz":300,"elapsed":27,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["NUM_LAYERS = 8\n","EMBEDDING_SIZE = 56\n","NUM_UNITS_FFN = 128\n","NUM_HEADS = 8\n","DROPOUT_RATE = 0.1"]},{"cell_type":"code","source":["VOCAB_SIZE_SOURCE, VOCAB_SIZE_TARGET"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XXwubsFOSfzM","executionInfo":{"status":"ok","timestamp":1684943822955,"user_tz":300,"elapsed":27,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"2bd5b1b0-8297-46af-b203-d607b72d45b2"},"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1289, 15)"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","execution_count":56,"metadata":{"id":"sHT5Ant1aqdR","executionInfo":{"status":"ok","timestamp":1684943826611,"user_tz":300,"elapsed":3671,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["## Define the transformer model\n","\n","transformer = Transformer(\n","  num_layers = NUM_LAYERS,\n","  embedding_size = EMBEDDING_SIZE,\n","  num_heads = NUM_HEADS,\n","  num_units_ffn = NUM_UNITS_FFN,\n","  length_source = TX_SOURCE,\n","  length_target = TX_TARGET,\n","  target_vocab_size = VOCAB_SIZE_TARGET,\n","  source_vocab_size = VOCAB_SIZE_SOURCE,\n","  dropout_rate = DROPOUT_RATE\n",")"]},{"cell_type":"code","source":["x_query.shape, x_tar.shape"],"metadata":{"id":"mmspCXi8Echc","executionInfo":{"status":"ok","timestamp":1684943826612,"user_tz":300,"elapsed":21,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"97289668-3911-4a9c-c2fc-2accb8770320"},"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((360000, 42), (360000, 12))"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["x_query[:10,:].shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nHOJ3VMpRu_F","executionInfo":{"status":"ok","timestamp":1684943826613,"user_tz":300,"elapsed":20,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"b8c6c4a0-13c8-4aa2-9dfe-7b35c5de1d92"},"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10, 42)"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","execution_count":59,"metadata":{"id":"BKM5PotGUa2b","executionInfo":{"status":"ok","timestamp":1684943831711,"user_tz":300,"elapsed":5113,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f181ef62-e00c-4233-d616-d4c49c3f1e83"},"outputs":[{"output_type":"stream","name":"stdout","text":["(8, 12, 15) (8, 8, 12, 42)\n"]}],"source":["#Testing the transformer\n","output = transformer([\n","    x_query[:8,:], #context\n","    x_tar[:8,:]    #target\n","])\n","print(output[0].shape, output[1].shape)"]},{"cell_type":"code","execution_count":60,"metadata":{"id":"EjypCISZ6DMq","executionInfo":{"status":"ok","timestamp":1684943831711,"user_tz":300,"elapsed":32,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"7649ce4f-948a-46e4-f8e4-e7901149d6c8"},"outputs":[{"output_type":"stream","name":"stdout","text":["(8, 8, 12, 42)\n"]}],"source":["attn_scores = transformer.decoder.dec_layers[-1].last_attn_scores\n","print(attn_scores.shape)  # (batch, heads, target_seq, input_seq)"]},{"cell_type":"code","execution_count":61,"metadata":{"id":"CtALHEG0HDhM","executionInfo":{"status":"ok","timestamp":1684943831712,"user_tz":300,"elapsed":31,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0d575124-be0b-4cfc-f773-9e5811fb3869"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"transformer\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," encoder (Encoder)           multiple                  1004152   \n","                                                                 \n"," decoder (Decoder)           multiple                  1747720   \n","                                                                 \n"," predicted_word (Dense)      multiple                  855       \n","                                                                 \n","=================================================================\n","Total params: 2,752,727\n","Trainable params: 2,752,727\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["transformer.summary()"]},{"cell_type":"markdown","metadata":{"id":"XznrnPzc_eEm"},"source":["# Create Train and Val Datasets"]},{"cell_type":"code","execution_count":62,"metadata":{"id":"8aLIkCY7VT1J","executionInfo":{"status":"ok","timestamp":1684943831713,"user_tz":300,"elapsed":25,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"43d07747-fbe5-46ac-8b56-bb240b139252"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(360000, 42)"]},"metadata":{},"execution_count":62}],"source":["padding_inputs_source = x_query.copy()\n","padding_inputs_source.shape"]},{"cell_type":"code","execution_count":63,"metadata":{"id":"1KlHfARnWGWL","executionInfo":{"status":"ok","timestamp":1684943831714,"user_tz":300,"elapsed":22,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f3ba3032-0f7f-4dd1-a2d7-076c793ef1d2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(360000, 12)"]},"metadata":{},"execution_count":63}],"source":["padding_inputs_target = x_tar.copy()\n","padding_inputs_target.shape"]},{"cell_type":"code","execution_count":64,"metadata":{"id":"2Vvcy8SsLke7","executionInfo":{"status":"ok","timestamp":1684943831714,"user_tz":300,"elapsed":19,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"9804a6cd-388e-4334-bd2b-4e1564ca6329"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(72102, 42)"]},"metadata":{},"execution_count":64}],"source":["is_train = np.random.uniform(size=(len(padding_inputs_source),)) < 0.8\n","padding_inputs_source[~is_train].shape"]},{"cell_type":"code","execution_count":65,"metadata":{"id":"QO76TbT3_36A","executionInfo":{"status":"ok","timestamp":1684943832276,"user_tz":300,"elapsed":577,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["def process_text(context, target):\n","\n","  # a = np.random.rand(N,N)\n","  # b = np.zeros((N,N+1))\n","  # b[:,:-1] = a\n","\n","  targ_in = np.zeros(target.shape, dtype='int32')\n","  targ_in[:,:-1] = target[:,:-1]\n","\n","  targ_out = np.zeros(target.shape,  dtype='int32')\n","  targ_out[:,:-1] = target[:,1:]\n","\n","  # targ_in = target[:,:-1]\n","  # targ_out = target[:,1:]\n","  return (context, targ_in), targ_out\n","\n","\n","train_ds = process_text(padding_inputs_source[is_train], padding_inputs_target[is_train] )\n","test_ds = process_text(padding_inputs_source[~is_train], padding_inputs_target[~is_train] )"]},{"cell_type":"code","execution_count":66,"metadata":{"id":"jjerxHvAFJvG","executionInfo":{"status":"ok","timestamp":1684943832276,"user_tz":300,"elapsed":49,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1a7539ba-5571-451b-8d41-6095c9f6c971"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(360000, 12)"]},"metadata":{},"execution_count":66}],"source":["padding_inputs_target.shape"]},{"cell_type":"code","source":["print('Source in First Sample')\n","\n","source_tokenizer.sequences_to_texts(\n","   [train_ds[0][0][0]]\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G9ComFnfTTrK","executionInfo":{"status":"ok","timestamp":1684943832276,"user_tz":300,"elapsed":38,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"353a0372-350b-4504-cdeb-12a192c3796b"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stdout","text":["Source in First Sample\n"]},{"output_type":"execute_result","data":{"text/plain":["['use recognize as black western lawyer continue finally 7 august 1921 religious identify practice <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN> <UKN>']"]},"metadata":{},"execution_count":67}]},{"cell_type":"code","execution_count":68,"metadata":{"id":"iLaXszFzD3_M","executionInfo":{"status":"ok","timestamp":1684943832277,"user_tz":300,"elapsed":35,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"42db11c2-c3e0-443f-98ab-a03f78317fda"},"outputs":[{"output_type":"stream","name":"stdout","text":["Source in First Sample\n"]},{"output_type":"execute_result","data":{"text/plain":["array([ 447,  393,  355,  203,  926,  312,  126,  561,   36,    4, 1200,\n","        983,  235,  789,    0,    0,    0,    0,    0,    0,    0,    0,\n","          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\n","          0,    0,    0,    0,    0,    0,    0,    0,    0], dtype=int32)"]},"metadata":{},"execution_count":68}],"source":["print('Source in First Sample')\n","train_ds[0][0][0]"]},{"cell_type":"code","source":["len(train_ds[0][1][0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z0-JTVvxUO7I","executionInfo":{"status":"ok","timestamp":1684943832277,"user_tz":300,"elapsed":31,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"eb92babd-c07d-4307-8790-8ccb89929e14"},"execution_count":69,"outputs":[{"output_type":"execute_result","data":{"text/plain":["12"]},"metadata":{},"execution_count":69}]},{"cell_type":"code","execution_count":70,"metadata":{"id":"evb7rzLNDdu7","executionInfo":{"status":"ok","timestamp":1684943832278,"user_tz":300,"elapsed":29,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"290069d9-e71e-42bb-dfa6-cbbcf3c8296d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Target In First Sample\n"]},{"output_type":"execute_result","data":{"text/plain":["['# 1 9 2 1 - 0 8 - 0 7 <UKN>']"]},"metadata":{},"execution_count":70}],"source":["print('Target In First Sample')\n","target_tokenizer.sequences_to_texts([train_ds[0][1][0]])"]},{"cell_type":"code","execution_count":71,"metadata":{"id":"SaKwOxkN_38g","executionInfo":{"status":"ok","timestamp":1684943832278,"user_tz":300,"elapsed":25,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6973cc67-cfad-4862-b5e1-ae29c4b3a001"},"outputs":[{"output_type":"stream","name":"stdout","text":["Validation Target First Sample\n"]},{"output_type":"execute_result","data":{"text/plain":["['1 9 2 1 - 0 8 - 0 7 % <UKN>']"]},"metadata":{},"execution_count":71}],"source":["print('Validation Target First Sample')\n","target_tokenizer.sequences_to_texts([train_ds[1][0]])"]},{"cell_type":"code","execution_count":72,"metadata":{"id":"LD34reltEU6s","executionInfo":{"status":"ok","timestamp":1684943832278,"user_tz":300,"elapsed":22,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"317ae37f-5bf7-4c10-fdd1-5966b2b6c9fb"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((287898, 42), (287898, 12), (287898, 12))"]},"metadata":{},"execution_count":72}],"source":["train_ds[0][0].shape, train_ds[0][1].shape, train_ds[1].shape"]},{"cell_type":"code","execution_count":73,"metadata":{"id":"9OkezmOhGkZU","executionInfo":{"status":"ok","timestamp":1684943832279,"user_tz":300,"elapsed":19,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f9ac861d-cf75-4d19-99d8-8a2b6b5b7f57"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((360000, 42), (360000, 12))"]},"metadata":{},"execution_count":73}],"source":["padding_inputs_source.shape, padding_inputs_target.shape"]},{"cell_type":"code","execution_count":74,"metadata":{"id":"evcrpzQFPtPl","executionInfo":{"status":"ok","timestamp":1684943832280,"user_tz":300,"elapsed":17,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"96a7adf8-3401-4d52-ca68-7e5735700d0d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(42,)"]},"metadata":{},"execution_count":74}],"source":["padding_inputs_source[0].shape"]},{"cell_type":"markdown","metadata":{"id":"VQupAHcl6U9R"},"source":["## Train The Model"]},{"cell_type":"markdown","metadata":{"id":"Nnro_Zt5cmXQ"},"source":["Use the Adam optimizer with a custom learning rate scheduler according to the formula in the original Transformer [paper](https://arxiv.org/abs/1706.03762).\n","\n","$$\\Large{lrate = d_{model}^{-0.5} * \\min(step{\\_}num^{-0.5}, step{\\_}num \\cdot warmup{\\_}steps^{-1.5})}$$"]},{"cell_type":"code","execution_count":75,"metadata":{"id":"8nvmDrAwclpB","executionInfo":{"status":"ok","timestamp":1684943832281,"user_tz":300,"elapsed":15,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["class CustomSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\n","  def __init__(self, embedding_size, warmup_steps=4000):\n","    super().__init__()\n","\n","    self.embedding_size = embedding_size\n","    self.embedding_size = tf.cast(self.embedding_size, tf.float32)\n","\n","    self.warmup_steps = warmup_steps\n","\n","  def __call__(self, step):\n","    step = tf.cast(step, dtype=tf.float32)\n","    arg1 = tf.math.rsqrt(step)\n","    arg2 = step * (self.warmup_steps ** -1.5)\n","\n","    return tf.math.rsqrt(self.embedding_size) * tf.math.minimum(arg1, arg2)"]},{"cell_type":"code","execution_count":76,"metadata":{"id":"ydYuPFx2czB7","executionInfo":{"status":"ok","timestamp":1684943832281,"user_tz":300,"elapsed":14,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["learning_rate = CustomSchedule(EMBEDDING_SIZE)\n","\n","optimizer = tf.keras.optimizers.Adam(learning_rate, beta_1=0.9, beta_2=0.98,\n","                                     epsilon=1e-9)"]},{"cell_type":"code","execution_count":77,"metadata":{"id":"HqE-z6qHdAqt","executionInfo":{"status":"ok","timestamp":1684943832281,"user_tz":300,"elapsed":14,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["## Loss and Metrics\n","\n","## We should use a mask for the losses too"]},{"cell_type":"code","execution_count":78,"metadata":{"id":"XdOy2SIWdM9x","executionInfo":{"status":"ok","timestamp":1684943832282,"user_tz":300,"elapsed":14,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["def masked_loss(label, pred):\n","  mask = label != 0\n","  loss_object = tf.keras.losses.SparseCategoricalCrossentropy(\n","    from_logits=True, reduction='none')\n","  loss = loss_object(label, pred)\n","\n","  mask = tf.cast(mask, dtype=loss.dtype)\n","  loss *= mask\n","\n","  loss = tf.reduce_sum(loss)/tf.reduce_sum(mask)\n","  return loss\n","\n","\n","def masked_accuracy(label, pred):\n","  pred = tf.argmax(pred, axis=2)\n","  label = tf.cast(label, pred.dtype)\n","  match = label == pred\n","\n","  mask = label != 0\n","\n","  match = match & mask\n","\n","  match = tf.cast(match, dtype=tf.float32)\n","  mask = tf.cast(mask, dtype=tf.float32)\n","  return tf.reduce_sum(match)/tf.reduce_sum(mask)"]},{"cell_type":"code","execution_count":79,"metadata":{"id":"qgerzcwM20ho","executionInfo":{"status":"ok","timestamp":1684943832282,"user_tz":300,"elapsed":14,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["## Compile our model\n","transformer.compile(\n","    loss={'output_1': masked_loss},\n","    optimizer=optimizer,\n","    metrics={'output_1':masked_accuracy})"]},{"cell_type":"code","source":["#transformer.load_weights('/content/drive/MyDrive/Deep Learning/SEQUENCE MODELS/dates_checkpoint/dates_transformer_weights')"],"metadata":{"id":"LIelfMYpHBh5","executionInfo":{"status":"ok","timestamp":1684943832282,"user_tz":300,"elapsed":14,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":80,"outputs":[]},{"cell_type":"code","execution_count":81,"metadata":{"id":"8bpQGM6w3p9P","executionInfo":{"status":"ok","timestamp":1684945153461,"user_tz":300,"elapsed":1321193,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"3ede62e8-6c14-4aaa-e26f-36a06812480e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/3\n","4499/4499 [==============================] - 495s 96ms/step - loss: 0.3305 - output_1_loss: 0.3305 - output_1_masked_accuracy: 0.8807 - val_loss: 0.0202 - val_output_1_loss: 0.0202 - val_output_1_masked_accuracy: 0.9928\n","Epoch 2/3\n","4499/4499 [==============================] - 409s 91ms/step - loss: 0.0455 - output_1_loss: 0.0455 - output_1_masked_accuracy: 0.9856 - val_loss: 0.0208 - val_output_1_loss: 0.0208 - val_output_1_masked_accuracy: 0.9894\n","Epoch 3/3\n","4499/4499 [==============================] - 417s 93ms/step - loss: 0.0409 - output_1_loss: 0.0409 - output_1_masked_accuracy: 0.9848 - val_loss: 0.0193 - val_output_1_loss: 0.0193 - val_output_1_masked_accuracy: 0.9899\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fa14584a500>"]},"metadata":{},"execution_count":81}],"source":["#Train our model\n","EPOCHS = 3\n","BATCH_SIZE = 64\n","\n","\n","transformer.fit(x=train_ds[0],\n","                y=train_ds[1],\n","                epochs=EPOCHS,\n","                validation_data=(test_ds[0], test_ds[1]),\n","                batch_size = BATCH_SIZE\n","                )\n"]},{"cell_type":"markdown","metadata":{"id":"czNWWdMXyCww"},"source":["## TEST"]},{"cell_type":"code","source":["source_map = {v:k for k, v in source_tokenizer.word_index.items()}\n","#source_map"],"metadata":{"id":"7N0zsWZWcz8n","executionInfo":{"status":"ok","timestamp":1684945153461,"user_tz":300,"elapsed":19,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":82,"outputs":[]},{"cell_type":"code","source":["target_map = {v:k for k, v in target_tokenizer.word_index.items()}\n","target_map"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4dGzIBZObB0p","executionInfo":{"status":"ok","timestamp":1684945153462,"user_tz":300,"elapsed":19,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"105a7f73-4d05-4013-db65-d8bbf012fa94"},"execution_count":83,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{1: '<UKN>',\n"," 2: '-',\n"," 3: '0',\n"," 4: '1',\n"," 5: '2',\n"," 6: '#',\n"," 7: '%',\n"," 8: '9',\n"," 9: '3',\n"," 10: '5',\n"," 11: '4',\n"," 12: '6',\n"," 13: '7',\n"," 14: '8'}"]},"metadata":{},"execution_count":83}]},{"cell_type":"code","source":[],"metadata":{"id":"0882yfJUczbj","executionInfo":{"status":"ok","timestamp":1684945153462,"user_tz":300,"elapsed":14,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":83,"outputs":[]},{"cell_type":"code","execution_count":84,"metadata":{"id":"5Dwo3Du5xIRr","executionInfo":{"status":"ok","timestamp":1684945153463,"user_tz":300,"elapsed":15,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["sentence=\"\"\"\n","\n","(born John Winston Lennon; thursday 9 of oct 1954) was an English singer, songwriter, musician and peace activist who achieved worldwide fame as founder, co-songwriter, co-lead vocalist and rhythm guitarist of the Beatles.\n","\"\"\"\n","\n","sentence = sentence.strip()"]},{"cell_type":"code","source":["tokenized_source = source_tokenizer.texts_to_sequences([sentence])\n","tokenized_padded_source = pad_sequences(tokenized_source, maxlen=TX_SOURCE, padding='post', truncating='post')"],"metadata":{"id":"tU18817lWbYC","executionInfo":{"status":"ok","timestamp":1684945153463,"user_tz":300,"elapsed":15,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":85,"outputs":[]},{"cell_type":"code","source":["tokenized_target = target_tokenizer.texts_to_sequences(['#'])\n","tokenized_target = pad_sequences(tokenized_target, maxlen=TX_TARGET, padding='post', truncating='post')"],"metadata":{"id":"aQe2NQVWWvxG","executionInfo":{"status":"ok","timestamp":1684945153464,"user_tz":300,"elapsed":15,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":86,"outputs":[]},{"cell_type":"code","execution_count":87,"metadata":{"id":"nUlAVr8ei08n","executionInfo":{"status":"ok","timestamp":1684945153464,"user_tz":300,"elapsed":15,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"a9f1da82-611d-4b7a-f02a-2e00723b6a82"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["((1, 42), (1, 12))"]},"metadata":{},"execution_count":87}],"source":["tokenized_padded_source.shape, tokenized_target.shape"]},{"cell_type":"code","source":["tokenized_target"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ANFpoaYWZ1of","executionInfo":{"status":"ok","timestamp":1684945153464,"user_tz":300,"elapsed":11,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"de97584d-36f4-4464-da5f-7f2dbb960624"},"execution_count":88,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=int32)"]},"metadata":{},"execution_count":88}]},{"cell_type":"code","source":["for t in range(TX_TARGET - 1):\n","  predictions = transformer([tokenized_padded_source, tokenized_target], training=False)[0]\n","  predictions = predictions[:, t, :]  # Shape `(batch_size, 1, vocab_size)`.\n","  res = tf.argmax(predictions, axis=-1)\n","  tokenized_target[:, t +1 ] = res.numpy()[0]\n","output_decoded = \"\".join([target_map.get(e) for e in tokenized_target[0]])\n","\n","print(f'Original Sentence: {sentence}')\n","print('Translated Sentence:',output_decoded)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l3aUNdOsX-iQ","executionInfo":{"status":"ok","timestamp":1684945156900,"user_tz":300,"elapsed":3443,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"74adcbd9-ecb1-4836-f771-ff5487a671e4"},"execution_count":89,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Sentence: (born John Winston Lennon; thursday 9 of oct 1954) was an English singer, songwriter, musician and peace activist who achieved worldwide fame as founder, co-songwriter, co-lead vocalist and rhythm guitarist of the Beatles.\n","Translated Sentence: #1954-10-09%\n"]}]},{"cell_type":"markdown","metadata":{"id":"ZhZRRJkxBIe8"},"source":["## PLOT ATTENTION"]},{"cell_type":"code","source":["in_tokens = sentence.split()\n","# while len(in_tokens) < TX_SOURCE:\n","#   in_tokens = in_tokens + ['<PAD>']\n","in_tokens = in_tokens[:TX_SOURCE]\n","len(in_tokens)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1JnDn66Bc58k","executionInfo":{"status":"ok","timestamp":1684945156901,"user_tz":300,"elapsed":15,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"6dd679d6-3b80-4cf3-98d4-eb669449ac9b"},"execution_count":90,"outputs":[{"output_type":"execute_result","data":{"text/plain":["33"]},"metadata":{},"execution_count":90}]},{"cell_type":"code","execution_count":91,"metadata":{"id":"XtZu8mQP8cWd","executionInfo":{"status":"ok","timestamp":1684945156901,"user_tz":300,"elapsed":12,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["out_tokens = [x for x in output_decoded]"]},{"cell_type":"code","execution_count":92,"metadata":{"id":"ugra99Cm-pYI","executionInfo":{"status":"ok","timestamp":1684945156902,"user_tz":300,"elapsed":12,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"outputs":[],"source":["def plot_attention_head(in_tokens, translated_tokens, attention):\n","  # The plot is of the attention when a token was generated.\n","  # The model didn't generate `<START>` in the output. Skip it.\n","  translated_tokens = translated_tokens[1:]\n","  ax = plt.gca()\n","  ax.matshow(attention[:,:len(in_tokens)])\n","  ax.set_xticks(range(len(in_tokens)))\n","  ax.set_yticks(range(len(translated_tokens)))\n","\n","  ax.set_xticklabels(in_tokens, rotation=90)\n","  ax.set_yticklabels(translated_tokens)"]},{"cell_type":"code","execution_count":93,"metadata":{"id":"fPTWwo91_O8Y","executionInfo":{"status":"ok","timestamp":1684945157553,"user_tz":300,"elapsed":663,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/","height":331},"outputId":"487cd6f4-21bb-4dd7-e020-010548f81697"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}],"source":["head=0\n","attention = transformer.decoder.last_attn_scores[0][head]\n","plot_attention_head(in_tokens, out_tokens, attention )"]},{"cell_type":"code","source":["# head=1\n","# attention = transformer.decoder.last_attn_scores[0][head]\n","# plot_attention_head(in_tokens, out_tokens,attention )"],"metadata":{"id":"kiN11wHuNt1m","executionInfo":{"status":"ok","timestamp":1684945157554,"user_tz":300,"elapsed":4,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":94,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FiiVYEZ_fQE-"},"source":["## SAVE THE MODEL"]},{"cell_type":"code","source":["saved_path = '/content/drive/MyDrive/Deep Learning/SEQUENCE MODELS/model_dates_checkpoint'\n","tf.saved_model.save(transformer,saved_path)"],"metadata":{"id":"YaghVzrv79Ia","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684945206531,"user_tz":300,"elapsed":48980,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"8e24be0f-cfbb-4139-d5e8-3bcc33f0f70e"},"execution_count":95,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:Found untraced functions such as positional_embedding_layer_call_fn, positional_embedding_layer_call_and_return_conditional_losses, dropout_8_layer_call_fn, dropout_8_layer_call_and_return_conditional_losses, positional_embedding_1_layer_call_fn while saving (showing 5 of 620). These functions will not be directly callable after loading.\n"]}]},{"cell_type":"code","source":["## SAVE TOKENIZERS\n","\n","import pickle\n","\n","#Export the tokenizer\n","with open(f'{saved_path}/source_tokenizer.pickle', 'wb') as handle:\n","    pickle.dump(source_tokenizer, handle, protocol=pickle.HIGHEST_PROTOCOL)\n","\n","\n","#Export the tokenizer\n","with open(f'{saved_path}/target_tokenizer.pickle', 'wb') as handle:\n","    pickle.dump(target_tokenizer, handle, protocol=pickle.HIGHEST_PROTOCOL)"],"metadata":{"id":"ce_guCXxdfWj","executionInfo":{"status":"ok","timestamp":1684945206532,"user_tz":300,"elapsed":14,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":96,"outputs":[]},{"cell_type":"code","source":["# LOAD THE MODEL\n","\n","loaded = tf.saved_model.load(saved_path)\n","loaded_transformer = loaded.signatures['serving_default']"],"metadata":{"id":"qwEbmeZC79v3","executionInfo":{"status":"ok","timestamp":1684945219793,"user_tz":300,"elapsed":13273,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":97,"outputs":[]},{"cell_type":"code","source":["out = loaded_transformer(input_1 = x_query[:8] , input_2 = x_tar[:8])\n","predictions = out.get('output_1')\n","attention = out.get('output_2')\n","predictions.shape, attention.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jn31ZBw48OBY","executionInfo":{"status":"ok","timestamp":1684945220986,"user_tz":300,"elapsed":1197,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"outputId":"c2707f3d-e868-4a4d-9189-e786253240ad"},"execution_count":98,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(TensorShape([8, 12, 15]), TensorShape([8, 8, 12, 42]))"]},"metadata":{},"execution_count":98}]},{"cell_type":"code","source":["class Translator(tf.Module):\n","  def __init__(self,\n","               source_tokenizer, #input tokenizer\n","               target_tokenizer, #target tokenizer\n","               loaded_transformer, #model\n","               TX_SOURCE, TX_TARGET):\n","    \n","    self.source_tokenizer = source_tokenizer\n","    self.target_tokenizer = target_tokenizer\n","    self.loaded_transformer = loaded_transformer\n","    self.TX_SOURCE = TX_SOURCE\n","    self.TX_TARGET = TX_TARGET\n","    self.target_map = {v:k for k, v in target_tokenizer.word_index.items()}\n","\n","  def __call__(self, sentence):\n","\n","    tokenized_source = self.source_tokenizer.texts_to_sequences([sentence])\n","    tokenized_padded_source = tf.keras.preprocessing.sequence.pad_sequences(tokenized_source, maxlen=self.TX_SOURCE, padding='post', truncating='post')\n","\n","    # As the output language is English, initialize the output with the `[START]` token.\n","    tokenized_target = self.target_tokenizer.texts_to_sequences(['#'])\n","    tokenized_target = tf.keras.preprocessing.sequence.pad_sequences(tokenized_target, maxlen=self.TX_TARGET, padding='post', truncating='post')\n","\n","    # `tf.TensorArray` is required here (instead of a Python list), so that the\n","    # dynamic-loop can be traced by `tf.function`.\n","\n","    # Run from TX TARGET steps\n","\n","    for t in range(self.TX_TARGET - 1):\n","      out = self.loaded_transformer(input_1 = tokenized_padded_source , input_2 = tokenized_target)\n","      predictions = out.get('output_1')\n","      attention_weights = out.get('output_2')\n","      # predictions = self.transformer([tokenized_padded_source, tokenized_target], training=False)\n","      predictions = predictions[:, t, :]  # Shape `(batch_size, 1, vocab_size)`.\n","      res = tf.argmax(predictions, axis=-1)\n","      tokenized_target[:, t +1 ] = res.numpy()[0]\n","\n","    output_decoded = \"\".join([self.target_map.get(e) for e in tokenized_target[0]])\n","    print(f'Original Sentence: {sentence}')\n","    print('Translated Sentence:',output_decoded)\n","\n","    #Tokens\n","    in_tokens = sentence.split()\n","    in_tokens = in_tokens[:self.TX_SOURCE]\n","    out_tokens = [x for x in output_decoded]\n","\n","    # `tf.function` prevents us from using the attention_weights that were\n","    # calculated on the last iteration of the loop.\n","    # So, recalculate them outside the loop.\n","\n","    # print('calculation attention weigths')\n","    # self.transformer([tokenized_padded_source, tokenized_target], training=False)\n","    # attention_weights = self.transformer.decoder.last_attn_scores\n","\n","    return output_decoded, in_tokens, out_tokens, attention_weights"],"metadata":{"id":"sxwUouWEO0mf","executionInfo":{"status":"ok","timestamp":1684945220987,"user_tz":300,"elapsed":4,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":99,"outputs":[]},{"cell_type":"code","source":["#Define the translator\n","translator = Translator(\n","    source_tokenizer = source_tokenizer,\n","    target_tokenizer=target_tokenizer,\n","    loaded_transformer = loaded_transformer,\n","    TX_SOURCE=TX_SOURCE, TX_TARGET=TX_TARGET)"],"metadata":{"id":"Os5L_RE8O0pH","executionInfo":{"status":"ok","timestamp":1684945220987,"user_tz":300,"elapsed":4,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":100,"outputs":[]},{"cell_type":"code","source":["translated, in_tokens, out_tokens, attention_weights = translator('hello i born the 29 of june of the year 1996')"],"metadata":{"id":"YgrjyDI1O0re","executionInfo":{"status":"ok","timestamp":1684945221256,"user_tz":300,"elapsed":273,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ba2d8c44-600f-44c8-92cd-885bf4d04cfc"},"execution_count":101,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Sentence: hello i born the 29 of june of the year 1996\n","Translated Sentence: #1996-06-29%\n"]}]},{"cell_type":"code","source":["head=0\n","attention = attention_weights[0][head]\n","plot_attention_head(in_tokens, out_tokens,attention )"],"metadata":{"id":"dPkIe7yyO0uG","executionInfo":{"status":"ok","timestamp":1684945221606,"user_tz":300,"elapsed":352,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/","height":456},"outputId":"3aec222c-ddff-44dc-edf3-2d96921b863f"},"execution_count":102,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["translated, in_tokens, out_tokens, attention_weights = translator(\n","\"\"\"\n","Kurt Donald Cobain (feb 20, 1967) was an American musician who was the founder, lead vocalist, guitarist and primary songwriter of the rock band Nirvana. \n","\"\"\"\n",")"],"metadata":{"id":"nRYAb77VGeVO","executionInfo":{"status":"ok","timestamp":1684945221885,"user_tz":300,"elapsed":283,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"b06fe440-99b3-43d0-9eca-c7c136653219"},"execution_count":103,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Sentence: \n","Kurt Donald Cobain (feb 20, 1967) was an American musician who was the founder, lead vocalist, guitarist and primary songwriter of the rock band Nirvana. \n","\n","Translated Sentence: #1967-02-20%\n"]}]},{"cell_type":"code","source":["translated, in_tokens, out_tokens, attention_weights = translator(\n","\"\"\"\n","Kurt Donald Cobain died april 5 of 1980. He  was an American musician who was the founder, lead vocalist, guitarist and primary songwriter of the rock band Nirvana. \n","\"\"\"\n",")"],"metadata":{"id":"jSvXJLdiPfxP","executionInfo":{"status":"ok","timestamp":1684945222451,"user_tz":300,"elapsed":569,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6b3e0dc0-3f09-416e-c216-653338121676"},"execution_count":104,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Sentence: \n","Kurt Donald Cobain died april 5 of 1980. He  was an American musician who was the founder, lead vocalist, guitarist and primary songwriter of the rock band Nirvana. \n","\n","Translated Sentence: #1980-04-05%\n"]}]},{"cell_type":"code","source":["\n","translated, in_tokens, out_tokens, attention_weights = translator(\n","\"\"\"\n","\n","The 2022 FIFA World Cup was an international football tournament contested by the men's national teams of FIFA's member associations and 22nd edition of the FIFA World Cup.\n","It took place in Qatar from 20 November to 18 December 2022, making it the first World Cup held in the Arab world and Muslim world.\n","\n","\"\"\"\n",")"],"metadata":{"id":"D4Ax8Jnamypn","executionInfo":{"status":"ok","timestamp":1684945222452,"user_tz":300,"elapsed":8,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"75b29b51-b369-4802-d798-ebcd50117efe"},"execution_count":105,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Sentence: \n","\n","The 2022 FIFA World Cup was an international football tournament contested by the men's national teams of FIFA's member associations and 22nd edition of the FIFA World Cup.\n","It took place in Qatar from 20 November to 18 December 2022, making it the first World Cup held in the Arab world and Muslim world.\n","\n","\n","Translated Sentence: #2022-12-28%\n"]}]},{"cell_type":"code","source":["head=0\n","attention = attention_weights[0][head]\n","plot_attention_head(in_tokens, out_tokens,attention )"],"metadata":{"id":"6RkaVuY_oWnP","executionInfo":{"status":"ok","timestamp":1684945223058,"user_tz":300,"elapsed":610,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/","height":281},"outputId":"32be41b6-c821-4da6-e148-aeedec66508b"},"execution_count":106,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["translated, in_tokens, out_tokens, attention_weights = translator(\n","\"\"\"\n","\n","Wednesday, 8 of february, 2023\n","\n","\"\"\"\n",")"],"metadata":{"id":"NayMFOsFoyy9","executionInfo":{"status":"ok","timestamp":1684945223339,"user_tz":300,"elapsed":283,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"340644b0-7aa3-46ee-acf7-cb2affb5369f"},"execution_count":107,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Sentence: \n","\n","Wednesday, 8 of february, 2023\n","\n","\n","Translated Sentence: #2908-02-08%\n"]}]},{"cell_type":"code","source":["translated, in_tokens, out_tokens, attention_weights = translator(\n","\"\"\"\n","\n","Lionel Andrés Messi born 24 June 1987, also known as Leo Messi, is an Argentine professional footballer who plays as a forward for Ligue 1 club Paris Saint-Germain and captains the Argentina national team.\n","\n","\"\"\"\n",")"],"metadata":{"id":"4vz5atiJo4rG","executionInfo":{"status":"ok","timestamp":1684945223516,"user_tz":300,"elapsed":180,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6c5789fa-56f6-406b-dcaf-3889049f4557"},"execution_count":108,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Sentence: \n","\n","Lionel Andrés Messi born 24 June 1987, also known as Leo Messi, is an Argentine professional footballer who plays as a forward for Ligue 1 club Paris Saint-Germain and captains the Argentina national team.\n","\n","\n","Translated Sentence: #1987-06-24%\n"]}]},{"cell_type":"code","source":["translated, in_tokens, out_tokens, attention_weights = translator(\n","\"\"\"\n","In the year of 1945 june 16 a lot of words withou any sence\n","\"\"\"\n",")"],"metadata":{"id":"vSWKeUjcsqF9","executionInfo":{"status":"ok","timestamp":1684945223770,"user_tz":300,"elapsed":255,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"47642051-95db-42b9-d9bd-0b0773575b57"},"execution_count":109,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Sentence: \n","In the year of 1945 june 16 a lot of words withou any sence\n","\n","Translated Sentence: #1945-06-16%\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"R4XGaWvB558B","executionInfo":{"status":"ok","timestamp":1684945223770,"user_tz":300,"elapsed":6,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":109,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"DXtwfpf_5-6t","executionInfo":{"status":"ok","timestamp":1684945223771,"user_tz":300,"elapsed":6,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":109,"outputs":[]},{"cell_type":"code","source":["#loaded_transformer(input_1=tokenized_padded_source, input_2 = tokenized_target)['output_1']"],"metadata":{"id":"D-qDnurk5-S2","executionInfo":{"status":"ok","timestamp":1684945223771,"user_tz":300,"elapsed":6,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":110,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"lk33Qb5R5-V9","executionInfo":{"status":"ok","timestamp":1684945223772,"user_tz":300,"elapsed":6,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":110,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"G-TZgyio5-ZL","executionInfo":{"status":"ok","timestamp":1684945223772,"user_tz":300,"elapsed":6,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":110,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"i4a_fmdz5-b-","executionInfo":{"status":"ok","timestamp":1684945223772,"user_tz":300,"elapsed":6,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":110,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"89wt1mGM5-e2","executionInfo":{"status":"ok","timestamp":1684945223773,"user_tz":300,"elapsed":7,"user":{"displayName":"A Acevedo","userId":"11093372531147050541"}}},"execution_count":110,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"machine_shape":"hm","provenance":[],"gpuType":"T4","toc_visible":true,"mount_file_id":"199d5IZPeIevYaBSg9TYOo6coPLZ7EPIs","authorship_tag":"ABX9TyOEph8iioziU5VB3lq/EZjZ"},"gpuClass":"premium","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}